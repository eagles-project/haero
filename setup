#!/usr/bin/env bash

# This script creates a build directory and sticks a config.sh script into it.
# Then config.sh can be edited and run within the build directory.

# Print usage info.
if [ "$1" = "" ]; then
  echo "setup: Creates a build directory with a configuration file."
  echo "Usage: setup build_dir"
  exit 1
fi

# Create the build directory if it doesn't exist.
if [ ! -d $1 ]; then
  mkdir -p $1
fi

# Copy our template config script into place.
echo -e "#!/usr/bin/env bash\n" > $1/config.sh
echo "SOURCE_DIR=$PWD" >> $1/config.sh
cat <<EOT >> $1/config.sh
# ^^^^^^ location of haero source code.

# config.sh -- A CMake configuration script.
# Edit this file to change the parameters in your build. Uncomment exactly one
# value for each parameter.

#-----------------------------------------------------------------------------
#                             Installation prefix
#-----------------------------------------------------------------------------
PREFIX=$PWD/$1

#-----------------------------------------------------------------------------
#                             Third-party libraries
#-----------------------------------------------------------------------------
# Usually you don't need to set these. But we provide this ability in case
# another project (e.g. SCREAM) needs to build this one and use its own
# libraries. We also use these in our automatic testing environment. If any one
# of these variables is supplied for a library, all must be supplied.

#KOKKOS_DIR=/path/to/kokkos

#EKAT_INCLUDE_DIR=/path/to/ekat/includes
#EKAT_LIBRARY_DIR=/path/to/ekat/library
#EKAT_LIBRARY=libekat.a

#YAMLCPP_INCLUDE_DIR=/path/to/yaml-cpp/includes
#YAMLCPP_LIBRARY_DIR=/path/to/yaml-cpp/library
#YAMLCPP_LIBRARY=libyaml-cpp.a

#HDF5_INCLUDE_DIR=/path/to/hdf5/include
#HDF5_LIBRARY_DIR=/path/to/hdf5/library
#HDF5_LIBRARY=libhdf5.a
#HDF5_HL_LIBRARY=libhdf5_hl.a

#NETCDF_INCLUDE_DIR=/path/to/netcdf-c/includes
#NETCDF_LIBRARY_DIR=/path/to/netcdf-c/library
#NETCDF_LIBRARY=libnetcdf.a

#OPENBLAS_INCLUDE_DIR=/path/to/openblas/includes
#OPENBLAS_LIBRARY_DIR=/path/to/openblas/library
#OPENBLAS_LIBRARY=libopenblas.a

#TINES_INCLUDE_DIR=/path/to/tines/includes
#TINES_LIBRARY_DIR=/path/to/tines/library
#TINES_LIBRARY=libtines.a

#TCHEM_INCLUDE_DIR=/path/to/tchem/includes
#TCHEM_LIBRARY_DIR=/path/to/tchem/library
#TCHEM_LIBRARY=libtchemcore.a

#-----------------------------------------------------------------------------
#                             Inter-Node Parallelism (MPI)
#-----------------------------------------------------------------------------

# Build with MPI for parallel simulations.
# This is currently needed by the EKAT library. We can get rid of it as
# a requirement down the line if necessary.
MPI=ON

#-----------------------------------------------------------------------------
#                             On-Node Parallelism (Kokkos)
#-----------------------------------------------------------------------------

# Host = CPU, Device = CPU (with OpenMP on non-Apple machines)
DEVICE=CPU

# Host = CPU (serial), Device = CUDA GPU
#DEVICE=CUDA

# Select one of the following device architectures based on the above:
# (These options are taken from kokkos_arch.cmake)
DEVICE_ARCH=AMDAVX          # AMD chip (CPU)
#DEVICE_ARCH=ARMV80          # ARMv8.0 Compatible CPU (CPU)
#DEVICE_ARCH=ARMV81          # ARMv8.1 Compatible CPU (CPU)
#DEVICE_ARCH=ARMV8_THUNDERX  # ARMv8 Cavium ThunderX CPU (CPU)
#DEVICE_ARCH=ARMV8_THUNDERX2 # ARMv8 Cavium ThunderX2 CPU (CPU)
#DEVICE_ARCH=A64FX           # ARMv8.2 with SVE Suport (CPU)
#DEVICE_ARCH=WSM             # Intel Westmere CPU (CPU)
#DEVICE_ARCH=SNB             # Intel Sandy/Ivy Bridge CPUs (CPU)
#DEVICE_ARCH=HSW             # Intel Haswell CPUs (CPU)
#DEVICE_ARCH=BDW             # Intel Broadwell Xeon E-class CPUs (CPU)
#DEVICE_ARCH=SKX             # Intel Sky Lake Xeon E-class HPC CPUs (AVX512) (CPU)
#DEVICE_ARCH=KNC             # Intel Knights Corner Xeon Phi (CPU)
#DEVICE_ARCH=KNL             # Intel Knights Landing Xeon Phi (CPU)
#DEVICE_ARCH=BGQ             # IBM Blue Gene Q (CPU)
#DEVICE_ARCH=POWER7          # IBM POWER7 CPUs (CPU)
#DEVICE_ARCH=POWER8          # IBM POWER8 CPUs (CPU)
#DEVICE_ARCH=POWER9          # IBM POWER9 CPUs (CPU)
#DEVICE_ARCH=KEPLER30        # NVIDIA Kepler generation CC 3.0 (CUDA)
#DEVICE_ARCH=KEPLER32        # NVIDIA Kepler generation CC 3.2 (CUDA)
#DEVICE_ARCH=KEPLER35        # NVIDIA Kepler generation CC 3.5 (CUDA)
#DEVICE_ARCH=KEPLER37        # NVIDIA Kepler generation CC 3.7 (CUDA)
#DEVICE_ARCH=MAXWELL50       # NVIDIA Maxwell generation CC 5.0 (CUDA)
#DEVICE_ARCH=MAXWELL52       # NVIDIA Maxwell generation CC 5.2 (CUDA)
#DEVICE_ARCH=MAXWELL53       # NVIDIA Maxwell generation CC 5.3 (CUDA)
#DEVICE_ARCH=PASCAL60        # NVIDIA Pascal generation CC 6.0 (CUDA)
#DEVICE_ARCH=PASCAL61        # NVIDIA Pascal generation CC 6.1 (CUDA)
#DEVICE_ARCH=VOLTA70         # NVIDIA Volta generation CC 7.0 (CUDA)
#DEVICE_ARCH=VOLTA72         # NVIDIA Volta generation CC 7.2 (CUDA)
#DEVICE_ARCH=TURING75        # NVIDIA Turing generation CC 7.5 (CUDA)
#DEVICE_ARCH=AMPERE80        # NVIDIA Ampere generation CC 8.0 (CUDA)
#DEVICE_ARCH=ZEN             # AMD Zen architecture (CPU)
#DEVICE_ARCH=ZEN2            # AMD Zen2 architecture (CPU)
#DEVICE_ARCH=VEGA900         # AMD GPU MI25 GFX900 (HIP)
#DEVICE_ARCH=VEGA906         # AMD GPU MI50/MI60 GFX906 (HIP)
#DEVICE_ARCH=VEGA908         # AMD GPU (HIP)
#DEVICE_ARCH=INTEL_GEN       # Intel GPUs Gen9+ (GPU)

#-----------------------------------------------------------------------------
#                             Floating Point Precision
#-----------------------------------------------------------------------------
# Choose one of the following.

# Double precision.
PRECISION=double

# Single precision.
#PRECISION=single

#-----------------------------------------------------------------------------
#                         Pack size for vectorization
#-----------------------------------------------------------------------------

# This controls how many floating point numbers we can operate on simultaneously
# using SIMD vector operations. This is mostly for use on CPUs, but some newer
# GPUs also support vectorization. NOTE: Fortran implementations of aerosol
# processes are only supported for a PACK_SIZE of 1.
PACK_SIZE=1

#-----------------------------------------------------------------------------
#                                Build type
#-----------------------------------------------------------------------------
# Choose one of the following.

# Debug executable (debugging symbols, no optimization).
BUILD_TYPE=Debug

# Release executable (No symbols, optimization).
#BUILD_TYPE=Release

#-----------------------------------------------------------------------------
#                     Build the standalone haero driver?
#-----------------------------------------------------------------------------
# Choose one of the foillowing.

# Build the standalone driver for haero.
BUILD_DRIVER=ON

# Skip the standalone driver and its dependencies.
#BUILD_DRIVER=OFF

#-----------------------------------------------------------------------------
#                               Verbose builds
#-----------------------------------------------------------------------------

# Uncomment this if you want really verbose builds.
#VERBOSE=ON

#-----------------------------------------------------------------------------
#                               Documentation
#-----------------------------------------------------------------------------
# For developers: turn on to include comments in the compiled .tex docs
#INCLUDE_DESIGN_DOC_COMMENTS=ON

#-----------------------------------------------------------------------------
#                                   Compilers
#-----------------------------------------------------------------------------

if [ "\$MPI" = "ON" ]; then
  CXX=mpic++
  CC=mpicc
  FC=mpif90
else
  CXX=c++
  CC=cc
  FC=gfortran
fi

# Override compilers here (ONLY if you know what you're doing!).

# C++ compiler.
#CXX=c++

# Fortran compiler.
#FC=gfortran

# C compiler.
#CC=cc

#-----------------------------------------------------------------------------
#                   Don't change anything below here.
#-----------------------------------------------------------------------------

# Are we on a special machine?
pushd "\$SOURCE_DIR"/machines >& /dev/null
for MACHINE_FILE in \$(ls)
do
  MACHINE=\${MACHINE_FILE/\.sh/}
  if echo `hostname` | grep -q "\$MACHINE"; then
    echo "Found machine file \$MACHINE_FILE. Setting up environment for \$MACHINE..."
    . ./\$MACHINE.sh
  fi
done
popd >& /dev/null

# We use good old-fashioned UNIX makefiles.
GENERATOR="Unix Makefiles"

OPTIONS=""
if [ "\$MPI" = "ON" ]; then
  OPTIONS="-DHAVE_MPI=ON"
fi
if [ "\$VERBOSE" = "ON" ]; then
  OPTIONS="\$OPTIONS -DCMAKE_VERBOSE_MAKEFILE=ON"
fi

# Configure HDF5 if needed.
if [ ! "\$HDF5_LIBRARY_DIR" = "" -o ! "\$HDF5_INCLUDE_DIR" = "" -o ! "\$HDF5_LIBRARY" = "" -o ! "\$HDF5_HL_LIBRARY" = "" ]; then
  if [ "\$HDF5_LIBRARY" = "" ]; then
    echo "Error: HDF5_LIBRARY must be specified for a custom HDF5 library."
    exit 1
  fi
  if [ "\$HDF5_HL_LIBRARY" = "" ]; then
    echo "Error: HDF5_HL_LIBRARY must be specified for a custom high-level HDF5 library."
    exit 1
  fi
  if [ "\$HDF5_INCLUDE_DIR" = "" ]; then
    echo "Error: HDF5_INCLUDE_DIR must be specified for a custom HDF5 library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DHDF5_LIBRARY=\$HDF5_LIBRARY_DIR/\$HDF5_LIBRARY"
  OPTIONS="\$OPTIONS -DHDF5_HL_LIBRARY=\$HDF5_LIBRARY_DIR/\$HDF5_HL_LIBRARY"
  OPTIONS="\$OPTIONS -DHDF5_INCLUDE_DIR=\$HDF5_INCLUDE_DIR"
fi

# Configure NetCDF if needed.
if [ ! "\$NETCDF_LIBRARY_DIR" = "" -o ! "\$NETCDF_INCLUDE_DIR" = "" -o ! "\$NETCDF_LIBRARY" = "" ]; then
  if [ "\$NETCDF_LIBRARY" = "" ]; then
    echo "Error: NETCDF_LIBRARY must be specified for a custom NetCDF library."
    exit 1
  fi
  if [ "\$NETCDF_INCLUDE_DIR" = "" ]; then
    echo "Error: NETCDF_INCLUDE_DIR must be specified for a custom NetCDF library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DNETCDF_LIBRARY=\$NETCDF_LIBRARY_DIR/\$NETCDF_LIBRARY"
  OPTIONS="\$OPTIONS -DNETCDF_INCLUDE_DIR=\$NETCDF_INCLUDE_DIR"
fi

# Configure yaml-cpp if needed.
if [ ! "\$YAMLCPP_LIBRARY_DIR" = "" -o ! "\$YAMLCPP_INCLUDE_DIR" = "" -o ! "\$YAMLCPP_LIBRARY" = "" ]; then
  if [ "\$YAMLCPP_LIBRARY" = "" ]; then
    echo "Error: YAMLCPP_LIBRARY must be specified for a custom yaml-cpp library."
    exit 1
  fi
  if [ "\$YAMLCPP_INCLUDE_DIR" = "" ]; then
    echo "Error: YAMLCPP_INCLUDE_DIR must be specified for a custom yaml-cpp library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DYAMLCPP_LIBRARY=\$YAMLCPP_LIBRARY_DIR/\$YAMLCPP_LIBRARY"
  OPTIONS="\$OPTIONS -DYAMLCPP_INCLUDE_DIR=\$YAMLCPP_INCLUDE_DIR"
fi

# Configure ekat if needed.
if [ ! "\$EKAT_LIBRARY_DIR" = "" -o ! "\$EKAT_INCLUDE_DIR" = "" -o ! "\$EKAT_LIBRARY" = "" ]; then
  if [ "\$EKAT_LIBRARY" = "" ]; then
    echo "Error: EKAT_LIBRARY must be specified for a custom EKAT library."
    exit 1
  fi
  if [ "\$EKAT_INCLUDE_DIR" = "" ]; then
    echo "Error: EKAT_INCLUDE_DIR must be specified for a custom EKAT library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DEKAT_LIBRARY=\$EKAT_LIBRARY_DIR/\$EKAT_LIBRARY"
  OPTIONS="\$OPTIONS -DEKAT_INCLUDE_DIR=\$EKAT_INCLUDE_DIR"
fi

# Configure OpenBLAS if needed.
if [ ! "\$OPENBLAS_LIBRARY_DIR" = "" -o ! "\$OPENBLAS_INCLUDE_DIR" = "" -o ! "\$OPENBLAS_LIBRARY" = "" ]; then
  if [ "\$OPENBLAS_LIBRARY" = "" ]; then
    echo "Error: OPENBLAS_LIBRARY must be specified for a custom OpenBLAS library."
    exit 1
  fi
  if [ "\$OPENBLAS_INCLUDE_DIR" = "" ]; then
    echo "Error: OPENBLAS_INCLUDE_DIR must be specified for a custom OpenBLAS library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DOPENBLAS_LIBRARY=\$OPENBLAS_LIBRARY_DIR/\$OPENBLAS_LIBRARY"
  OPTIONS="\$OPTIONS -DOPENBLAS_INCLUDE_DIR=\$OPENBLAS_INCLUDE_DIR"
fi

# Configure Tines if needed.
if [ ! "\$TINES_LIBRARY_DIR" = "" -o ! "\$TINES_INCLUDE_DIR" = "" -o ! "\$TINES_LIBRARY" = "" ]; then
  if [ "\$TINES_LIBRARY" = "" ]; then
    echo "Error: TINES_LIBRARY must be specified for a custom Tines library."
    exit 1
  fi
  if [ "\$TINES_INCLUDE_DIR" = "" ]; then
    echo "Error: TINES_INCLUDE_DIR must be specified for a custom Tines library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DTINES_LIBRARY=\$TINES_LIBRARY_DIR/\$TINES_LIBRARY"
  OPTIONS="\$OPTIONS -DTINES_INCLUDE_DIR=\$TINES_INCLUDE_DIR"
fi

# Configure TChem if needed.
if [ ! "\$TCHEM_LIBRARY_DIR" = "" -o ! "\$TCHEM_INCLUDE_DIR" = "" -o ! "\$TCHEM_LIBRARY" = "" ]; then
  if [ "\$TCHEM_LIBRARY" = "" ]; then
    echo "Error: TCHEM_LIBRARY must be specified for a custom TChem library."
    exit 1
  fi
  if [ "\$TCHEM_INCLUDE_DIR" = "" ]; then
    echo "Error: TCHEM_INCLUDE_DIR must be specified for a custom TChem library."
    exit 1
  fi
  OPTIONS="\$OPTIONS -DTCHEM_LIBRARY=\$TCHEM_LIBRARY_DIR/\$TCHEM_LIBRARY"
  OPTIONS="\$OPTIONS -DTCHEM_INCLUDE_DIR=\$TCHEM_INCLUDE_DIR"
fi

# Add extra linker flags if needed.
if [ ! "\$EXTRA_LDFLAGS" = "" ]; then
  OPTIONS="\$OPTIONS -DHAERO_EXTRA_LDFLAGS=\$EXTRA_LDFLAGS"
fi

# Clear the build cache.
rm -f CMakeCache.txt

if [ "\$PACK_SIZE" = "1" -a "\$DEVICE" = "CPU" ]; then
  OPTIONS="\$OPTIONS -DCMAKE_Fortran_COMPILER=\$FC"
fi

# Configure the build.
cmake \
 -DCMAKE_INSTALL_PREFIX:PATH=\$PREFIX \
 -DCMAKE_BUILD_TYPE=\$BUILD_TYPE \
 -DCMAKE_C_COMPILER=\$CC \
 -DCMAKE_CXX_COMPILER=\$CXX \
 -DHAERO_PRECISION=\$PRECISION \
 -DHAERO_ENABLE_DRIVER=\$BUILD_DRIVER \
 -DHAERO_DEVICE=\$DEVICE \
 -DHAERO_DEVICE_ARCH=\$DEVICE_ARCH \
 -DHAERO_PACK_SIZE=\$PACK_SIZE \
 -DHAERO_DOC_INCLUDE_COMMENTS=\$INCLUDE_DESIGN_DOC_COMMENTS \
 \$OPTIONS \
 -G "\$GENERATOR" \
 \$SOURCE_DIR
EOT

# Make config.sh executable.
chmod a+x $1/config.sh

# Give instructions.
echo "Your build directory '$1' is ready."
echo "To configure your build:"
echo "  1. cd $1"
echo "  2. Edit config.sh"
echo "  3. ./config.sh"
echo "  4. Build using 'make -j'."

