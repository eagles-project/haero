!> This module is a bridge between the @CXX_CLASS_NAME@ C++ class and the
!> @F90_MODULE_NAME@ Fortran module.
module @F90_MODULE_NAME@_bridge

  implicit none
  private

  ! Module functions
  public :: @F90_MODULE_NAME@_init, &
            @F90_MODULE_NAME@_run, &
            @F90_MODULE_NAME@_finalize, &
            @F90_MODULE_NAME@_set_integer_param, &
            @F90_MODULE_NAME@_set_logical_param, &
            @F90_MODULE_NAME@_set_real_param

contains

! Initializes the prognostic process.
subroutine @F90_MODULE_NAME@_init() bind(c)
  use haero, only: model
  use @F90_MODULE_NAME@, only: init
  implicit none

  call init(model)
end subroutine

! Runs the prognostic process, computing tendencies
subroutine @F90_MODULE_NAME@_run(t, dt, progs, atm, diags, tends) bind(c)
  use iso_c_binding, only: c_ptr, c_f_pointer
  use haero_precision, only: wp
  use haero, only: prognostics_t, atmosphere_t, diagnostics_t, tendencies_t, &
                   prognostics_from_c_ptr, atmosphere_from_c_ptr, &
                   diagnostics_from_c_ptr, tendencies_from_c_ptr
  use @F90_MODULE_NAME@, only: run
  implicit none

  ! Arguments
  real(wp), value, intent(in) :: t     ! simulation time
  real(wp), value, intent(in) :: dt    ! simulation time step
  type(c_ptr), value, intent(in) :: progs ! prognostic variables
  type(c_ptr), value, intent(in) :: atm   ! atmospheric state
  type(c_ptr), value, intent(in) :: diags ! diagnostic variables
  type(c_ptr), value, intent(in) :: tends ! tendencies

  ! Fortran prognostics, atmosphere, diagnostics, tendencies types
  type(prognostics_t) :: prognostics
  type(atmosphere_t)  :: atmosphere
  type(diagnostics_t) :: diagnostics
  type(tendencies_t)  :: tendencies

  ! Get Fortran data types from our C pointers.
  prognostics = prognostics_from_c_ptr(progs)
  atmosphere = atmosphere_from_c_ptr(atm)
  diagnostics = diagnostics_from_c_ptr(diags)
  tendencies = tendencies_from_c_ptr(tends)

  ! Call the actual subroutine.
  call run(t, dt, prognostics, atmosphere, diagnostics, tendencies)
end subroutine

! Finalizes the prognostic process
subroutine @F90_MODULE_NAME@_finalize() bind(c)
  use @F90_MODULE_NAME@, only: finalize
  implicit none

  call finalize()
end subroutine

! Sets an integer parameter within the module
subroutine @F90_MODULE_NAME@_set_integer_param(name, val) bind(c)
  use iso_c_binding, only: c_ptr, c_int
  use haero, only: c_to_f_string
  use @F90_MODULE_NAME@, only: set_integer_param
  implicit none

  type(c_ptr), value, intent(in)    :: name ! parameter name
  integer(c_int), value, intent(in) :: val  ! parameter value

  call set_integer_param(c_to_f_string(name), val)
end subroutine

! Sets a logical parameter within the module
subroutine @F90_MODULE_NAME@_set_logical_param(name, val) bind(c)
  use iso_c_binding, only: c_ptr, c_bool
  use haero, only: c_to_f_string
  use @F90_MODULE_NAME@, only: set_logical_param
  implicit none

  type(c_ptr), value, intent(in)     :: name ! parameter name
  logical(c_bool), value, intent(in) :: val  ! parameter value

  logical :: f_val

  f_val = val
  call set_logical_param(c_to_f_string(name), f_val)
end subroutine

! Sets a real-valued parameter within the module
subroutine @F90_MODULE_NAME@_set_real_param(name, val) bind(c)
  use iso_c_binding, only: c_ptr, c_real
  use haero, only: c_to_f_string
  use @F90_MODULE_NAME@, only: set_real_param
  implicit none

  type(c_ptr), value, intent(in)  :: name ! parameter name
  real(c_real), value, intent(in) :: val  ! parameter value

  call set_real_param(c_to_f_string(name), val)
end subroutine

end module

